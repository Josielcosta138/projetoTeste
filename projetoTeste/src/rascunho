
 -------------->	THREAD de execução Parelelo <---------------
		
		package cursojava.thread;

import javax.swing.JOptionPane;

public class Thhread {
	
	public static void main(String[] args) throws InterruptedException {
		
		// Thread processando em paralelo
		new Thread() {
			
			public void run() { // exucuta o que eu quiser
				//código da rotina
				
				// Código da rotina para executar Paralelo
				for (int i = 0; i < 8  ; i++) {
					
					// Executar esse envio com tempo determinado
					System.out.println(" Executando rotina: E-mail. "+i);
						
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} // 1seg * 1000
				}
				// Fim do código paralelo
				
			};
			
		}.start();// Liga a thread de processo paralelo
		
			// Código do sistema do usuario que continua fluxo do trab
			System.out.println(" Chegou ao fim o teste da Thread! ");
			// Fluxo do Sistem, Cadastro de venda etc...
			JOptionPane.showMessageDialog(null, " Sistema continua para Usuário! ");
	}
	
}






		// MENOR NOTA
				if (disc.getNota()[i] == 0) {

					menor = disc.getNota()[i];
					diciplina.setMenor(menor);

				} else {
					
					if (disc.getNota() [i] < menor) {

						menor = disc.getNota()[i];
						diciplina.setMenor(menor);

					}
				}
				















		// ----------------------------- ARRAY E VETOR -----------------------------  //
		
		
		
			String[] nomes = new String[3];
			String[] dadoFixo =  {"Joao@gmail.com ", "Bruna@gmail.com", "Asdrubol@gmail.com", "2022"};
			
			
				nomes[2] = " Joao ";
				nomes[1] = " Bruna ";
				nomes[0] = " Aspdrubol ";
		
				// EXIBIÇÃO ARRAY DE NOMES
				for (int pos = 0; pos < nomes.length; pos++) {
					
					System.out.println(" Posição do Array  "+(pos +1)+"° : Nome:"+nomes[pos]);
				}
				System.out.println(" ");
				
				// EXIBIÇÃO ARRAY DE DADOSFIXO
				for (int j = 0; j < dadoFixo.length; j++) {
				
					System.out.println(" Posição do Array  "+(j +1)+"° : Dados fixos: "+dadoFixo[j]);
				}
				
		/* Array pode ser de todos tipos de Objetos */
		/* Array sempre tem que ter posições Definindas [0], [1].... */
		
		// INFORMANDO A QNTD DE POSIÇÕES NO ARRAY
				
		String Qntdposicoes = JOptionPane.showInputDialog(" Informe a qntd de Posições? ");
		
			double notaSoma = 0;	
			double[] notas = new double[Integer.parseInt(Qntdposicoes)];
			
			
		  // INFORMANDO AS NOTAS NAS POSIÇÕES
		  for (int pos = 0; pos < notas.length; pos++) {
			
			  String valor = JOptionPane.showInputDialog(" Informe a nota "+ ( pos +1));
			  
			  	notas[pos] =  Double.parseDouble(valor); 
		}
		
		
		  	// EXIBI NA TELA NOTAS E POSIÇÕES
			for (int pos = 0; pos < notas.length; pos++) {
				
				System.out.println(" Posição Array "+ pos +". "+" Nota "+ (pos +1)+"° = " +notas[pos]);
			
		}
		
			// SOMA NOTAS E EXIBI 
				String pos1 = JOptionPane.showInputDialog(" informe a Posição para somar Notas");
				int notaSomar1 =  Integer.parseInt(pos1);
				
				String pos2 = JOptionPane.showInputDialog(" informe a Posição para somar Notas");
				int notaSomar2 =  Integer.parseInt(pos2);
			
						notaSoma = (notas[notaSomar1] + notas[notaSomar2]);
				
								System.out.println(" ");
								System.out.println(" Nota somada: "+notaSoma);


				// -------------------- END ARRAY E VETOR  ----------------------------- //

			








if (new Secretario().autenticar(login, senha)) {



/*Secretario secretario = new Secretario();
		secretario.setLogin(login);
		secretario.setSenha(senha);
		*/

@Override
	public boolean autenticar() {
		 
		return login.equalsIgnoreCase("janice27") && senha.equalsIgnoreCase("janice37");
	}







// Métodos GETTERS and SETTERS
	
	// SET para receber ou adicionar dados no Atributos
	// GET para resgatar ou obter valor do Atributo
	// Receber dados



/* Removendo Diciplina 
		int escolha = JOptionPane.showConfirmDialog(null, " Deseja excluir alguma Diciplina? ");
						
			if (escolha == 0) {	// Opção Sim = 0 
					
				int continuarRemover = 0;
				int posicao = 1;
				
				while (continuarRemover == 0) {				
					
					JOptionPane.showMessageDialog(null, " Listas de Diciplinas: "+aluno1.getDiciplinas());
					
				String diciplinaRemover = JOptionPane.showInputDialog(" Informe qual diciplina irá excluir"
						+ " 1 ,2 ,3 ou 4? ");	
				//Chamando na lista da Diciplina					// Posiçção na Lista [0], [1], [2], [3]  por isso (  - 1  )
				aluno1.getDiciplinas().remove(Integer.valueOf(diciplinaRemover).intValue() - posicao );
				posicao ++;
				continuarRemover = JOptionPane.showConfirmDialog(null, " Continuar a Remover? ");	
				
				}// while		
			}*/





// Lista dos Alunos
		List<Aluno> alunos = new ArrayList<Aluno>();
		
		List<Aluno> alunosAprovado = new ArrayList<Aluno>();
		List<Aluno> alunosRecuperacao = new ArrayList<Aluno>();
		List<Aluno> alunosReprovado = new ArrayList<Aluno>();
		List<Aluno> alunosAcimaDaMedia = new ArrayList<Aluno>();
		
		
		alunos.add(aluno1); // Adicionando a o aluno1 a Lista de (alunos) 				
		} 
		 	
		 	for (Aluno aluno : alunos) {  // Processando a lista ( Aprovados ,Acima Média, Recuperção )
		 		
		 		if (aluno.getAlunoAprovado().equalsIgnoreCase(statusAluno.APROVADO) ) {
					alunosAprovado.add(aluno);
				}else {
					if (aluno.getAlunoAprovado().equalsIgnoreCase(statusAluno.APROVADOACIMAMEDIA)) {
						alunosAcimaDaMedia.add(aluno);
					}else {
						if (aluno.getAlunoAprovado().equalsIgnoreCase(statusAluno.RECUPERACAO)) {
							alunosRecuperacao.add(aluno);
						}else {
							if (aluno.getAlunoAprovado().equalsIgnoreCase(statusAluno.REPROVADO)) {
								alunosReprovado.add(aluno);
								
							}	// if reprovado
						} // if recuperaçao
					} // if acima media
				} // if aprovado
				
			} // if For aluno
		 	
		 	
		 	System.out.println("------------------- Lista Aprovados ----------------");
		 	for (Aluno aluno : alunosAprovado) {
		 		System.out.println(" ");
				System.out.println( " Aluno "+aluno.getNome() );
				System.out.println(" Média: "+aluno.getMediaNota());
				System.out.println(" Resultado: "+aluno.getAlunoAprovado());
				
				for (int posList = 0; posList < aluno.getDiciplinas().size(); posList++) {
					   Diciplina disc = aluno.getDiciplinas().get(posList);
						System.out.println(" Diciplinas: "+disc.getDiciplina()+" nota: "+disc.getNota());
				}
		 	}



// Percorrendo Lista pelas Posições
		 	
		   for (int pos = 0; pos < alunos.size(); pos++) {
			   
			   System.out.println(" ");
			   
			   	Aluno aluno = alunos.get(pos);   
			   	
			   	// Substituindo um Aluno na Lista
			   	if (aluno.getNome().equalsIgnoreCase("Jose")) {
			   		
			   		Aluno alunoTrocar = new Aluno();   // Novo Objeto alunoTrocar 
			   		alunoTrocar.setNome(" Bruna Troca");
			   		
			   		Diciplina disciplina = new Diciplina();	// Novo Objeto disciplina
			   		disciplina.setDiciplina(" Arquitetura Software");
			   		disciplina.setNota(9);
			   		
			   		alunoTrocar.getDiciplinas().add(disciplina);
			   		alunos.set(pos, alunoTrocar);	// Adiciona o alunoTrocar na pos da Lista de alunos
			   		
			   		aluno = alunos.get(pos); // aluno = recebendo alunoTrocra
			   		
				}
			   
			   		System.out.println(" Aluno: "+aluno.getNome());
			   
			   for (int posList = 0; posList < aluno.getDiciplinas().size(); posList++) {
				   Diciplina disc = aluno.getDiciplinas().get(posList);
					System.out.println(" Diciplinas: "+disc.getDiciplina()+" nota: "+disc.getNota());
			}
			   
			   System.out.println(" Média: "+aluno.getMediaNota());
			   System.out.println(" Resultado: "+aluno.getAlunoAprovado());
			   
				
		  }
		}




// Exibindo com Resultados na Tela com ToString4
				System.out.println(" ");
				System.out.println("\n Lista Atualizada: "
						+ " Aluno : " +aluno1+ "\n"
						+ " Media aluno: "+aluno1.getMediaNota()+"\n"
						+ " Resultado: "+aluno1.getAlunoAprovado() );
				System.out.println("------------------------------------");
				
				
				case 1 :		// Vizualicação todos os Alunos do Lista
		 		
			for (Aluno aluno : alunos) {
					
	 			System.out.println(" Aluno : " +aluno.getNome()+ "\n"
	 			+" Diciplina: "+aluno.getDiciplinas()+"\n" 
	 			+" Media aluno: "+aluno.getMediaNota()+"\n"
	 			+" Resultado: "+aluno.getAlunoAprovado());
	 			System.out.println("---------------------------------------");
	 			break;
			}
	 			
	 				
	 			case 2 :  	// Vizualicação somente 1 Aluno do Lista
	 				
	 				String nomePesquisa = JOptionPane.showInputDialog(null, " Informe nome para pesquisa? ");
	 				
	 				for (Aluno aluno : alunos) {
	 					
	 					if (aluno.getNome().equalsIgnoreCase(nomePesquisa)) {
	 		 					
	 		 			System.out.println(" Aluno : " +aluno.getNome()+ "\n"
	 		 			+" Diciplina: "+aluno.getDiciplinas()+"\n" 
	 		 			+" Media aluno: "+aluno.getMediaNota()+"\n"
	 		 			+" Resultado: "+aluno.getAlunoAprovado());
	 		 			System.out.println("---------------------------------------");
	 		 			break;	 
	 					}
	 				}
				
				
				if (aluno.getNome().equalsIgnoreCase(anotherString)) {
	 				
	 				
	 				}
	 				
	 				
	 				
	 				//aluno1.getDiciplinas().remove(Integer.valueOf(diciplinaRemover).intValue() - posicao );
	 				
	 			case 3 :	// Removendo aluno da Lista
	 				
	 				//String nomeRemover = JOptionPane.showInputDialog(null, " Informe nome para remover? ");
	 						
	 				for (Aluno aluno : alunos) {	
	 					
	 					if (aluno.getNome().equalsIgnoreCase("ju")) {
	 						alunos.remove(aluno);
	 						
		 				 	break;
		 				 	
		 					}  
					}
	 			}
	 				
	 				
	 				for (Aluno aluno : alunos) {
	 					
	 					System.out.println(" Alunos que sobram na Lista ! \n "
	 							+" Aluno : " +aluno.getNome()+ "\n "
	 							+" Suas Materias: ");
	 					
	 						for (Diciplina diciplina : aluno.getDiciplinas()) {
							
	 							System.out.println(" Diciplina: "+diciplina.getDiciplina());
	 							System.out.println("---------------------------------------");
	 				 	break;
	 				 	
	 					}